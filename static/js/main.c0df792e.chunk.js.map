{"version":3,"sources":["solvers/tools/soustavaKongruenci.tsx","solvers/tools/mocneniPoCastech.tsx","solvers/tools/kongruence.tsx","solvers/RSA/rsa.tsx","solvers/tools/input.tsx","solvers/RSA/encode.tsx","solvers/RSA/decode.tsx","solvers/others/soustava.tsx","solvers/DiffieHellman/encode.tsx","solvers/ElGamal/encode.tsx","solvers/ElGamal/decode.tsx","solvers/Rabin/decode.tsx","solvers/Rabin/encode.tsx","solvers/polynomCodes/generateMatrix.tsx","solvers/polynomCodes/Matrix.tsx","solvers/polynomCodes/MatrixEncode.tsx","solvers/polynomCodes/encode.tsx","solvers/primitiveRoot/primitiveRoot.tsx","App.tsx","index.tsx"],"names":["soustavaKongruenci","r1","mod1","r2","mod2","varName","res","p1","p2","push","left","length","pre1","pre2","mult","Math","floor","newRow","steps","map","row","result","noSum","mocneniPoCastech","base","exponent","p","q","pow","q1","soustavaRes","mocneniPostupne","mod","kongruence","right","console","log","rsa_encode","e","m","mocneni","rsa_decode","c","soukromy","Input","changeHandler","event","props","onChange","parseInt","target","value","className","this","label","type","aria-label","React","Component","RSA_encode","state","setState","onClick","update","RSA_decode","SoustavaKongruenci","DiffieHellman","g","a","gb","diffeHellman","privateKey","ElGamal_encode","elGamal_encode","ElGamal_decode","elGamal_decode","congruency","Rabin_decode","rabin_decode","abs","Rabin_encode","rabin_encode","mocnina","generateMatrix","width","height","polynomOrig","polynom","Array","from","matrixCols","polynomToFixedLength","x","unshift","polynomXor","i","polynom1","polynom2","y","flipMatrix","matrix","Matrix","controls","newArr","undefined","cell","MatrixEncode","message","input","encodeWithPolynom","PrimitiveRoot","primitiveRoot","decomposition","primeDecomposition","root","int","decompositionToPrimes","prime","index","ceil","checkPrimitiveRoot","powers","forEach","used","join","reduce","prev","curr","toString","allPrimitiveRoots","number","Object","keys","str","pows","n","factor","f2","filter","indexOf","tabs","title","content","App","id","role","tab","data-toggle","href","aria-controls","aria-selected","aria-labelledby","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0df792e.chunk.js","sourcesContent":["import React from 'react';\n\nexport function soustavaKongruenci(r1: number, mod1: number, r2: number, mod2: number, varName: string) {\n    let res: { left: number; r1: number; r2: number }[] = [];\n\n    // mod1 must be bigger\n    if (mod2 > mod1) {\n        const p1 = mod2;\n        mod2 = mod1;\n        mod1 = p1;\n        const p2 = r2;\n        r2 = r1;\n        r1 = p2;\n    }\n\n    res.push({ left: mod1, r1: r2, r2: 0 });\n    res.push({ left: mod2, r1: 0, r2: r1 });\n\n    while (res[res.length - 1].left !== 1) {\n        const pre1 = res[res.length - 1];\n        const pre2 = res[res.length - 2];\n\n        const mult = Math.floor(pre2.left / pre1.left);\n        const newRow = {\n            left: pre2.left - pre1.left * mult,\n            r1: (pre2.r1 - pre1.r1 * mult) % mod2,\n            r2: (pre2.r2 - pre1.r2 * mult) % mod1,\n        };\n        res.push(newRow);\n    }\n\n    return {\n        steps: (\n            <>\n                <hr />\n                <p>Vyřešíme soustavu kongruencí:</p>\n                <br />\n                {res.map((row) => (\n                    <p>\n                        {row.left}\n                        {varName} ≡ {row.r1}·{mod1} + {row.r2}·{mod2}\n                    </p>\n                ))}\n                <br />\n                <p>\n                    Tedy {varName} ≡ {(res[res.length - 1].r1 * mod1 + res[res.length - 1].r2 * mod2) % (mod1 * mod2)}{' '}\n                    mod {mod1 * mod2}\n                </p>\n                <hr />\n            </>\n        ),\n        result: (res[res.length - 1].r1 * mod1 + res[res.length - 1].r2 * mod2) % (mod1 * mod2),\n        noSum: [res[res.length - 1].r1 * mod1, res[res.length - 1].r2 * mod2],\n    };\n}\n","import React from 'react';\nimport { soustavaKongruenci } from './soustavaKongruenci';\n\nexport function mocneniPoCastech(base: number, exponent: number, p: number, q: number, varName: string) {\n    let steps: JSX.Element[] = [];\n\n    const p1 = Math.pow((base % p + p) % p, (exponent % (p - 1) + p - 1) % (p - 1)) % p;\n    const q1 = Math.pow((base % q + q) % q, (exponent % (q - 1) + q - 1) % (q - 1)) % q;\n\n    steps.push(\n        <p>\n            Mocniny spočítáme zvlášť modulo {p} a {q}.\n        </p>,\n    );\n\n    steps.push(\n        <p>\n            {varName} ≡ {base}^{exponent} ≡ {base % p}^{exponent % (p - 1)} ≡ {p1} (mod {p})\n        </p>,\n    );\n    steps.push(\n        <p>\n            {varName} ≡ {base}^{exponent} ≡ {base % q}^{exponent % (q - 1)} ≡ {q1} (mod {q})\n        </p>,\n    );\n\n    steps.push(\n        <p>\n            Nyní dáme tyto dva mezivýsledky, {varName} ≡ {p1} mod {p}, {varName} ≡ {q1} mod {q}, dohromady modulo{' '}\n            {p * q}\n        </p>,\n    );\n    const soustavaRes = soustavaKongruenci(p1, p, q1, q, varName);\n    steps.push(soustavaRes.steps);\n\n    return {\n        steps: (\n            <>\n                <hr />\n                {steps}\n                <hr />\n            </>\n        ),\n        result: soustavaRes.result,\n    };\n}\n\nexport function mocneniPostupne(base: number, exponent: number, mod: number) {\n    let steps: JSX.Element[] = [];\n\n    steps.push(\n        <p>\n            ≡ 1 · {base}^{exponent}\n        </p>,\n    );\n\n    let left = 1;\n\n    while (exponent != 1) {\n        if (exponent % 2 == 0) {\n            steps.push(\n                <p>\n                    ≡ {left} · ({base}^2)^{exponent / 2} ≡ {left % mod} · ({(base * base) % mod}\n                    )^{exponent / 2}\n                </p>,\n            );\n            exponent = exponent / 2;\n            base = (base * base) % mod;\n            left = left % mod;\n        } else {\n            steps.push(\n                <p>\n                    ≡ {left} · {base} · ({base}^2)^{(exponent - 1) / 2} ≡ {(left * base) % mod} · ({(base * base) % mod}\n                    )^{(exponent - 1) / 2}\n                </p>,\n            );\n            left = (left * base) % mod;\n            exponent = (exponent - 1) / 2;\n            base = (base * base) % mod;\n        }\n    }\n\n    steps.push(<p>≡ {(left * base) % mod}</p>);\n\n    return {\n        steps: (\n            <>\n                <hr />\n                {steps}\n                <hr />\n            </>\n        ),\n        result: (left * base) % mod,\n    };\n}\n","import React from 'react';\n\nexport function kongruence(left: number, right: number, mod: number, varName: string) {\n    let res: { left: number; right: number }[] = [];\n\n    res.push({ left: mod, right: 0 });\n    left = left % mod;\n    right = right % mod;\n    res.push({ left, right });\n\n    while (res[res.length - 1].left !== 0) {\n        const pre1 = res[res.length - 1];\n        const pre2 = res[res.length - 2];\n\n        const mult = Math.floor(pre2.left / pre1.left);\n        const newRow = {\n            left: pre2.left - pre1.left * mult,\n            right: (pre2.right - pre1.right * mult) % mod,\n        };\n        res.push(newRow);\n    }\n\n    console.log(res);\n\n    return {\n        steps: (\n            <>\n                <hr />\n                <p>\n                    Vyřešíme kongruenci {left}x ≡ {right} mod {mod}:\n                </p>\n                <br />\n                {res.map((row) => (\n                    <p>\n                        {row.left}\n                        {varName} ≡ {row.right}\n                    </p>\n                ))}\n                <br />\n                {res[res.length - 1].left === 0 && res[res.length - 1].right === 0 ? (\n                    <p>\n                        Tedy {varName} ≡ {res[res.length - 2].right} mod {mod}\n                    </p>\n                ) : (\n                    <p>Tato kongruence nemá řešení, protože 0{varName} !≡ 0</p>\n                )}\n                <hr />\n            </>\n        ),\n        result: res[res.length - 1].left === 0 && res[res.length - 1].right === 0 ? res[res.length - 2].right : null,\n    };\n}\n","import React from 'react';\nimport { mocneniPoCastech } from '../tools/mocneniPoCastech';\nimport { kongruence } from '../tools/kongruence';\n\nexport function rsa_encode(e: number, p: number, q: number, m: number) {\n    const mocneni = mocneniPoCastech(m, e, p, q, 'c');\n\n    return {\n        steps: (\n            <>\n                <p>\n                    Máme n = p · q = {p * q}, e = {e} a m ≡ {m} (mod {p * q}).\n                </p>\n                <p>\n                    Zašifrovaná zpráva pak je c ≡ {m}^{e} (mod {p * q}).\n                </p>\n                <p>{mocneni.steps}</p>\n                <p>\n                    Zašifrovaná zpráva je tedy c ≡ {mocneni.result} (mod {p * q})\n                </p>\n            </>\n        ),\n        result: null,\n    };\n}\n\nexport function rsa_decode(e: number, p: number, q: number, c: number) {\n    const soukromy = kongruence(e, 1, (p - 1) * (q - 1), 'd');\n    if (!soukromy.result) {\n        return {\n            steps: (\n                <>\n                    <p>\n                        K veřejnému klíči e = {e} potřebujeme najít soukromý klíč d, tj. inverzi modulo φ({p}·{q}) ={' '}\n                        {p - 1}·{q - 1} = {(p - 1) * (q - 1)}:\n                    </p>\n                    {soukromy.steps}\n                </>\n            ),\n            result: null,\n        };\n    }\n\n    const mocneni = mocneniPoCastech(c, soukromy.result, p, q, 'c');\n\n    return {\n        steps: (\n            <>\n                <p>\n                    K veřejnému klíči e = {e} potřebujeme najít soukromý klíč d, tj. inverzi modulo φ({p}·{q}) = {p - 1}\n                    ·{q - 1} = {(p - 1) * (q - 1)}:\n                </p>\n                {soukromy.steps}\n                <p>\n                    Dešifrovaná zpráva pak je m ≡ {c}^{soukromy.result} (mod {p * q}).\n                </p>\n                {mocneni.steps}\n                <p>\n                    Dešifrovaná zpráva je tedy m ≡ {(mocneni.result % (p * q) + p*q) % -(p * q)} (mod {p * q})\n                </p>\n            </>\n        ),\n        result: null,\n    };\n}\n","import React from 'react';\n\nexport type IInputProps = {\n    value: number;\n    label: string;\n    onChange: (value: number) => void;\n};\n\nexport class Input extends React.Component<IInputProps, {}> {\n    changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.props.onChange(parseInt(event.target.value) || 0);\n    };\n\n    render() {\n        return (\n            <div className=\"input-group\">\n                <div className=\"input-group-prepend\">\n                    <span className=\"input-group-text\">{this.props.label}</span>\n                </div>\n                <input\n                    type=\"number\"\n                    className=\"form-control\"\n                    aria-label=\"\"\n                    onChange={this.changeHandler}\n                    value={this.props.value}\n                />\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { rsa_encode } from './rsa';\nimport { Input } from '../tools/input';\n\nexport type IRSA_encodeState = {\n    p: number;\n    q: number;\n    e: number;\n    m: number;\n    steps: JSX.Element;\n};\n\nexport class RSA_encode extends React.Component<{}, IRSA_encodeState> {\n    state: IRSA_encodeState = {\n        p: 0,\n        q: 0,\n        e: 0,\n        m: 0,\n        steps: <></>,\n    };\n\n    update() {\n        this.setState({ steps: rsa_encode(this.state.e, this.state.p, this.state.q, this.state.m).steps });\n    }\n\n    render() {\n        return (\n            <>\n                <Input\n                    label=\"e (exponent) = \"\n                    onChange={(value) => {\n                        this.setState({ e: value });\n                    }}\n                    value={this.state.e}\n                />\n                <Input\n                    label=\"p (prvočíslo 1) = \"\n                    onChange={(value) => {\n                        this.setState({ p: value });\n                    }}\n                    value={this.state.p}\n                />\n                <Input\n                    label=\"q (prvočíslo 2) = \"\n                    onChange={(value) => {\n                        this.setState({ q: value });\n                    }}\n                    value={this.state.q}\n                />\n                <Input\n                    label=\"m (zpráva) = \"\n                    onChange={(value) => {\n                        this.setState({ m: value });\n                    }}\n                    value={this.state.m}\n                />\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.update()}>\n                    Vypočítej!\n                </button>\n                <hr />\n                {this.state.steps}\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { rsa_decode } from './rsa';\nimport { Input } from '../tools/input';\n\nexport type IRSA_decodeState = {\n    p: number;\n    q: number;\n    e: number;\n    c: number;\n    steps: JSX.Element;\n};\n\nexport class RSA_decode extends React.Component<{}, IRSA_decodeState> {\n    state: IRSA_decodeState = {\n        p: 0,\n        q: 0,\n        e: 0,\n        c: 0,\n        steps: <></>,\n    };\n\n    update() {\n        this.setState({ steps: rsa_decode(this.state.e, this.state.p, this.state.q, this.state.c).steps });\n    }\n\n    render() {\n        return (\n            <>\n                <Input\n                    label=\"e (exponent) = \"\n                    onChange={(value) => {\n                        this.setState({ e: value });\n                    }}\n                    value={this.state.e}\n                />\n                <Input\n                    label=\"p (prvočíslo 1) = \"\n                    onChange={(value) => {\n                        this.setState({ p: value });\n                    }}\n                    value={this.state.p}\n                />\n                <Input\n                    label=\"q (prvočíslo 2) = \"\n                    onChange={(value) => {\n                        this.setState({ q: value });\n                    }}\n                    value={this.state.q}\n                />\n                <Input\n                    label=\"c (šifrovaná zpráva) = \"\n                    onChange={(value) => {\n                        this.setState({ c: value });\n                    }}\n                    value={this.state.c}\n                />\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.update()}>\n                    Vypočítej!\n                </button>\n                <hr />\n                {this.state.steps}\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { Input } from '../tools/input';\nimport { soustavaKongruenci } from '../tools/soustavaKongruenci';\n\nexport type ISoustavaKongruenciState = {\n    r1: number;\n    mod1: number;\n    r2: number;\n    mod2: number;\n    steps: JSX.Element;\n};\n\nexport class SoustavaKongruenci extends React.Component<{}, ISoustavaKongruenciState> {\n    state: ISoustavaKongruenciState = {\n        r1: 0,\n        mod1: 0,\n        r2: 0,\n        mod2: 0,\n        steps: <></>,\n    };\n\n    update() {\n        this.setState({\n            steps: soustavaKongruenci(this.state.r1, this.state.mod1, this.state.r2, this.state.mod2, 'x').steps,\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Input\n                    label=\"1. pravá strana (x ≡ ## (mod _)) \"\n                    onChange={(value) => {\n                        this.setState({ r1: value });\n                    }}\n                    value={this.state.r1}\n                />\n                <Input\n                    label=\"1. modulo (x ≡ _ (mod ##)) \"\n                    onChange={(value) => {\n                        this.setState({ mod1: value });\n                    }}\n                    value={this.state.mod1}\n                />\n                <Input\n                    label=\"2. pravá strana (x ≡ ## (mod _)) \"\n                    onChange={(value) => {\n                        this.setState({ r2: value });\n                    }}\n                    value={this.state.r2}\n                />\n                <Input\n                    label=\"2. modulo (x ≡ _ (mod ##)) \"\n                    onChange={(value) => {\n                        this.setState({ mod2: value });\n                    }}\n                    value={this.state.mod2}\n                />\n\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.update()}>\n                    Vypočítej!\n                </button>\n                <hr />\n                {this.state.steps}\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { Input } from '../tools/input';\nimport { mocneniPostupne } from '../tools/mocneniPoCastech';\n\nexport type IDiffieHellmanState = {\n    p: number;\n    g: number;\n    a: number;\n    gb: number;\n    steps: JSX.Element;\n};\n\nexport class DiffieHellman extends React.Component<{}, IDiffieHellmanState> {\n    state: IDiffieHellmanState = {\n        p: 0,\n        g: 0,\n        a: 0,\n        gb: 0,\n        steps: <></>,\n    };\n\n    update() {\n        this.setState({ steps: diffeHellman(this.state.p, this.state.g, this.state.a, this.state.gb).steps });\n    }\n\n    render() {\n        return (\n            <>\n                <Input\n                    label=\"p (prvočíslo) = \"\n                    onChange={(value) => {\n                        this.setState({ p: value });\n                    }}\n                    value={this.state.p}\n                />\n                <Input\n                    label=\"g (primitivní kořen) = \"\n                    onChange={(value) => {\n                        this.setState({ g: value });\n                    }}\n                    value={this.state.g}\n                />\n                <Input\n                    label=\"a (soukromý klíč 1) = \"\n                    onChange={(value) => {\n                        this.setState({ a: value });\n                    }}\n                    value={this.state.a}\n                />\n                <Input\n                    label=\"g^b (šifrovaný soukromý klíč) = \"\n                    onChange={(value) => {\n                        this.setState({ gb: value });\n                    }}\n                    value={this.state.gb}\n                />\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.update()}>\n                    Vypočítej!\n                </button>\n                <hr />\n                {this.state.steps}\n            </>\n        );\n    }\n}\n\nexport function diffeHellman(p: number, g: number, a: number, gb: number) {\n    const privateKey = mocneniPostupne(gb, a, p);\n\n    return {\n        steps: (\n            <>\n                <p>Alice získala Bobovu část klíče, jako g^n = {gb}.</p>\n                <p>Alice vypočítá a pošle svou část soukromého klíče:</p>\n                {mocneniPostupne(g, a, p).steps}\n                <p>Společný soukromý klíč nyní vypočítá, jako (g^b)^a</p>\n                {privateKey.steps}\n                <p>\n                    Společný soukromý klíč je tedy g^ab ≡ {privateKey.result} mod {p}.\n                </p>\n            </>\n        ),\n        result: privateKey.result,\n    };\n}\n","import React from 'react';\nimport { Input } from '../tools/input';\nimport { diffeHellman } from '../DiffieHellman/encode';\n\nexport type IElGamal_encodeState = {\n    p: number;\n    g: number;\n    a: number;\n    gb: number;\n    m: number;\n    steps: JSX.Element;\n};\n\nexport class ElGamal_encode extends React.Component<{}, IElGamal_encodeState> {\n    state: IElGamal_encodeState = {\n        p: 0,\n        g: 0,\n        a: 0,\n        gb: 0,\n        m: 0,\n        steps: <></>,\n    };\n\n    update() {\n        this.setState({\n            steps: elGamal_encode(this.state.p, this.state.g, this.state.a, this.state.gb, this.state.m).steps,\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Input\n                    label=\"p (prvočíslo) = \"\n                    onChange={(value) => {\n                        this.setState({ p: value });\n                    }}\n                    value={this.state.p}\n                />\n                <Input\n                    label=\"g (primitivní kořen) = \"\n                    onChange={(value) => {\n                        this.setState({ g: value });\n                    }}\n                    value={this.state.g}\n                />\n                <Input\n                    label=\"a (soukromý klíč 1) = \"\n                    onChange={(value) => {\n                        this.setState({ a: value });\n                    }}\n                    value={this.state.a}\n                />\n                <Input\n                    label=\"g^b (šifrovaný soukromý klíč) = \"\n                    onChange={(value) => {\n                        this.setState({ gb: value });\n                    }}\n                    value={this.state.gb}\n                />\n                <Input\n                    label=\"m (zpráva) = \"\n                    onChange={(value) => {\n                        this.setState({ m: value });\n                    }}\n                    value={this.state.m}\n                />\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.update()}>\n                    Vypočítej!\n                </button>\n                <hr />\n                {this.state.steps}\n            </>\n        );\n    }\n}\n\nexport function elGamal_encode(p: number, g: number, a: number, gb: number, m: number) {\n    const privateKey = diffeHellman(p, g, a, gb);\n\n    return {\n        steps: (\n            <>\n                <p>Nejprve spočítáme společnou část soukromého klíče pomocí protokolu Diffie-Hellman</p>\n                {privateKey.steps}\n                <p>\n                    Zprávu zašifrujeme, jako součin c ≡ {privateKey.result} · {m} (mod {p})\n                </p>\n                <p>\n                    c ≡ {(privateKey.result * m) % p} (mod {p})\n                </p>\n            </>\n        ),\n        result: (privateKey.result * m) % p,\n    };\n}\n","import React from 'react';\nimport { Input } from '../tools/input';\nimport { mocneniPostupne } from '../tools/mocneniPoCastech';\nimport { diffeHellman } from '../DiffieHellman/encode';\nimport { kongruence } from '../tools/kongruence';\n\nexport type IElGamal_decodeState = {\n    p: number;\n    g: number;\n    a: number;\n    gb: number;\n    c: number;\n    steps: JSX.Element;\n};\n\nexport class ElGamal_decode extends React.Component<{}, IElGamal_decodeState> {\n    state: IElGamal_decodeState = {\n        p: 0,\n        g: 0,\n        a: 0,\n        gb: 0,\n        c: 0,\n        steps: <></>,\n    };\n\n    update() {\n        this.setState({\n            steps: elGamal_decode(this.state.p, this.state.g, this.state.a, this.state.gb, this.state.c).steps,\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Input\n                    label=\"p (prvočíslo) = \"\n                    onChange={(value) => {\n                        this.setState({ p: value });\n                    }}\n                    value={this.state.p}\n                />\n                <Input\n                    label=\"g (primitivní kořen) = \"\n                    onChange={(value) => {\n                        this.setState({ g: value });\n                    }}\n                    value={this.state.g}\n                />\n                <Input\n                    label=\"a (soukromý klíč 1) = \"\n                    onChange={(value) => {\n                        this.setState({ a: value });\n                    }}\n                    value={this.state.a}\n                />\n                <Input\n                    label=\"g^b (šifrovaný soukromý klíč) = \"\n                    onChange={(value) => {\n                        this.setState({ gb: value });\n                    }}\n                    value={this.state.gb}\n                />\n                <Input\n                    label=\"c (zašifrovaná zpráva) = \"\n                    onChange={(value) => {\n                        this.setState({ c: value });\n                    }}\n                    value={this.state.c}\n                />\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.update()}>\n                    Vypočítej!\n                </button>\n                <hr />\n                {this.state.steps}\n            </>\n        );\n    }\n}\n\nexport function elGamal_decode(p: number, g: number, a: number, gb: number, c: number) {\n    const privateKey = diffeHellman(p, g, a, gb);\n    const congruency = kongruence(privateKey.result, c, p, 'm');\n\n    return {\n        steps: (\n            <>\n                <p>Nejprve spočítáme společnou část soukromého klíče pomocí protokolu Diffie-Hellman</p>\n                {privateKey.steps}\n                <p>\n                    Zprávu rozšifrujeme, jako kongruenci {c} ≡ c ≡ g^ab · m ≡ {privateKey.result} · m (mod {p}).\n                </p>\n                {congruency.steps}\n                <p>\n                    Odeslaná zpráva tedy byla m ≡ {congruency.result} (mod {p})\n                </p>\n            </>\n        ),\n        result: null,\n    };\n}\n","import React from 'react';\nimport { Input } from '../tools/input';\nimport { diffeHellman } from '../DiffieHellman/encode';\nimport { kongruence } from '../tools/kongruence';\nimport { mocneniPoCastech } from '../tools/mocneniPoCastech';\nimport { soustavaKongruenci } from '../tools/soustavaKongruenci';\n\nexport type IRabin_decodeState = {\n    p: number;\n    q: number;\n    c: number;\n    steps: JSX.Element;\n};\n\nexport class Rabin_decode extends React.Component<{}, IRabin_decodeState> {\n    state: IRabin_decodeState = {\n        p: 0,\n        q: 0,\n        c: 0,\n        steps: <></>,\n    };\n\n    update() {\n        this.setState({\n            steps: rabin_decode(this.state.p, this.state.q, this.state.c).steps,\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Input\n                    label=\"p (prvočíslo) = \"\n                    onChange={(value) => {\n                        this.setState({ p: value });\n                    }}\n                    value={this.state.p}\n                />\n                <Input\n                    label=\"q (prvočíslo) = \"\n                    onChange={(value) => {\n                        this.setState({ q: value });\n                    }}\n                    value={this.state.q}\n                />\n                <Input\n                    label=\"c (zašifrovaná zpráva) = \"\n                    onChange={(value) => {\n                        this.setState({ c: value });\n                    }}\n                    value={this.state.c}\n                />\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.update()}>\n                    Vypočítej!\n                </button>\n                <hr />\n                {this.state.steps}\n            </>\n        );\n    }\n}\n\nexport function rabin_decode(p: number, q: number, c: number) {\n    const p1 = Math.pow(c % p, ((p + 1) / 4) % (p - 1)) % p;\n    const q1 = Math.pow(c % q, ((q + 1) / 4) % (q - 1)) % q;\n\n    const soustavaRes = soustavaKongruenci(p1, p, q1, q, 'm');\n\n    return {\n        steps: (\n            <>\n                <p>\n                    Pro dešifrování zprávy potřebujeme zjistit sqrt({c}) (mod {p * q})$.\n                </p>\n                <p>\n                    Známe faktorizaci veřejného klíče, spočítáme tedy zvlášť modulo {p} a {q}.\n                </p>\n                <p>Obecně odmocninu z c (mod p) lze spočítat, jako ± c^((p+1)/(4)).</p>\n                <p>\n                    m ≡ ±{c}^(({p}+1)/(4)) ≡ ±{c}^{(p + 1) / 4} ≡ ±{c % p}^{((p + 1) / 4) % (p - 1)} ≡ ±{p1} (mod {p})\n                </p>\n                <p>\n                    m ≡ ±{c}^(({q}+1)/(4)) ≡ ±{c}^{(q + 1) / 4} ≡ ±{c % q}^{((q + 1) / 4) % (q - 1)} ≡ ±{q1} (mod {q})\n                </p>\n                <p>\n                    Nyní dáme tyto dva mezivýsledky, m ≡ {p1} mod {p}, m ≡ {q1} mod {q}, dohromady modulo {p * q}\n                </p>\n                {soustavaRes.steps}\n                <p>Nyní můžeme nahradit znaménka za ± a dopočítat 4 možné výsledky:</p>\n                <p>\n                    m ≡ ± {Math.abs(soustavaRes.noSum[0])} ± {Math.abs(soustavaRes.noSum[1])}\n                </p>\n                <p>\n                    m ≡ ± {Math.abs(soustavaRes.noSum[0] + soustavaRes.noSum[1])} ≡ ±{' '}\n                    {Math.abs(soustavaRes.noSum[0] + soustavaRes.noSum[1]) % (p * q)} (mod {p * q})\n                </p>\n                <p>\n                    m ≡ ± {Math.abs(soustavaRes.noSum[0] - soustavaRes.noSum[1])} ≡ ±{' '}\n                    {Math.abs(soustavaRes.noSum[0] - soustavaRes.noSum[1]) % (p * q)} (mod {p * q})\n                </p>\n            </>\n        ),\n        result: null,\n    };\n}\n","import React from 'react';\nimport { Input } from '../tools/input';\nimport { diffeHellman } from '../DiffieHellman/encode';\nimport { kongruence } from '../tools/kongruence';\nimport { mocneniPoCastech } from '../tools/mocneniPoCastech';\nimport { soustavaKongruenci } from '../tools/soustavaKongruenci';\n\nexport type IRabin_encodeState = {\n    p: number;\n    q: number;\n    m: number;\n    steps: JSX.Element;\n};\n\nexport class Rabin_encode extends React.Component<{}, IRabin_encodeState> {\n    state: IRabin_encodeState = {\n        p: 0,\n        q: 0,\n        m: 0,\n        steps: <></>,\n    };\n\n    update() {\n        this.setState({\n            steps: rabin_encode(this.state.p, this.state.q, this.state.m).steps,\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Input\n                    label=\"p (prvočíslo) = \"\n                    onChange={(value) => {\n                        this.setState({ p: value });\n                    }}\n                    value={this.state.p}\n                />\n                <Input\n                    label=\"q (prvočíslo) = \"\n                    onChange={(value) => {\n                        this.setState({ q: value });\n                    }}\n                    value={this.state.q}\n                />\n                <Input\n                    label=\"m (zpráva) = \"\n                    onChange={(value) => {\n                        this.setState({ m: value });\n                    }}\n                    value={this.state.m}\n                />\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.update()}>\n                    Vypočítej!\n                </button>\n                <hr />\n                {this.state.steps}\n            </>\n        );\n    }\n}\n\nexport function rabin_encode(p: number, q: number, m: number) {\n    const mocnina = mocneniPoCastech(m, 2, p, q, 'c');\n\n    return {\n        steps: (\n            <>\n                <p>Pro zašifrování zprávy potřebujeme umocnit m^2.</p>\n                {mocnina.steps}\n                <p>\n                    Zašifrovaná zpráva je tedy {(mocnina.result + p * q) % (p * q)} (mod {p * q})\n                </p>\n            </>\n        ),\n        result: null,\n    };\n}\n","export function generateMatrix(width: number, height: number, polynomOrig: boolean[]) {\n    let polynom = Array.from(polynomOrig);\n    let matrixCols: boolean[][] = [];\n\n    matrixCols.push(polynomToFixedLength(polynom, height));\n\n    for (let x = 1; x < width; x++) {\n        polynom.unshift(false);\n        if (polynom[height - width]) {\n            polynom = polynomXor(polynom, matrixCols[0], height);\n        }\n        matrixCols.push(polynomToFixedLength(polynom, height));\n    }\n\n    return matrixCols;\n}\n\nexport function polynomToFixedLength(polynom: boolean[], length: number) {\n    let res: boolean[] = [];\n\n    for (let i = 0; i < length; i++) {\n        if (polynom[i]) {\n            res.push(polynom[i]);\n        } else {\n            res.push(false);\n        }\n    }\n\n    return res;\n}\n\nexport function polynomXor(polynom1: boolean[], polynom2: boolean[], length: number): boolean[] {\n    let res: boolean[] = [];\n\n    for (let i = 0; i < length; i++) {\n        let x = false;\n        let y = false;\n        if (polynom1[i]) {\n            x = polynom1[i];\n        }\n        if (polynom2[i]) {\n            y = polynom2[i];\n        }\n        res.push((x && !y) || (!x && y));\n    }\n\n    return res;\n}\n\nexport function flipMatrix(matrix: boolean[][], width: number, height: number) {\n    let res: boolean[][] = [];\n\n    for (let y = 0; y < height; y++) {\n        let row: boolean[] = [];\n\n        for (let x = 0; x < width; x++) {\n            row[x] = matrix[x][y];\n        }\n\n        res.push(row);\n    }\n\n    return res;\n}\n","import React from 'react';\nimport { Input } from '../tools/input';\nimport { generateMatrix, flipMatrix } from './generateMatrix';\n\nexport type IMatrixState = {\n    width: number;\n    height: number;\n    polynom: boolean[];\n    matrix: boolean[][];\n};\n\nexport class Matrix extends React.Component<{}, IMatrixState> {\n    state: IMatrixState = {\n        width: 3,\n        height: 5,\n        polynom: [],\n        matrix: [],\n    };\n\n    update() {\n        this.setState({\n            matrix: generateMatrix(this.state.width, this.state.height, this.state.polynom),\n        });\n    }\n\n    render() {\n        let controls: JSX.Element[] = [];\n        for (let i = 0; i < this.state.height - this.state.width + 1; i++) {\n            controls.push(\n                <Input\n                    label={i === 0 ? '1' : i === 1 ? 'x' : 'x^' + i}\n                    onChange={(value) => {\n                        const newArr = Array.from(this.state.polynom);\n                        newArr[i] = value !== 0;\n                        this.setState({ polynom: newArr });\n                    }}\n                    value={this.state.polynom[i] ? 1 : 0}\n                />,\n            );\n        }\n\n        return (\n            <>\n                <Input\n                    label=\"šiřka = \"\n                    onChange={(value) => {\n                        this.setState({ width: value });\n                    }}\n                    value={this.state.width}\n                />\n                <Input\n                    label=\"výška = \"\n                    onChange={(value) => {\n                        this.setState({ height: value });\n                    }}\n                    value={this.state.height}\n                />\n                <hr />\n                {controls}\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.update()}>\n                    Vypočítej!\n                </button>\n\n                <hr />\n                <table className=\"matrix\">\n                    {this.state.matrix.length > 0 &&\n                        flipMatrix(this.state.matrix, this.state.width, this.state.height).map((row, y) => (\n                            <tr\n                                className={y === this.state.height - this.state.width - 1 ? 'border-bottom' : undefined}\n                            >\n                                {row.map((cell, x) => (\n                                    <td>{cell ? '1' : '0'}</td>\n                                ))}\n                            </tr>\n                        ))}\n                </table>\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { Input } from '../tools/input';\nimport { generateMatrix, flipMatrix, polynomToFixedLength } from './generateMatrix';\nimport { encodeWithPolynom } from './encode';\n\nexport type IMatrixEncodeState = {\n    width: number;\n    height: number;\n    polynom: boolean[];\n    matrix: boolean[][];\n    message: boolean[];\n};\n\nexport class MatrixEncode extends React.Component<{}, IMatrixEncodeState> {\n    state: IMatrixEncodeState = {\n        width: 3,\n        height: 5,\n        polynom: [],\n        matrix: [],\n        message: [],\n    };\n\n    update() {\n        this.setState({\n            matrix: generateMatrix(this.state.width, this.state.height, this.state.polynom),\n        });\n    }\n\n    render() {\n        let controls: JSX.Element[] = [];\n        controls.push(<p>Generující polynom:</p>);\n        for (let i = 0; i < this.state.height - this.state.width + 1; i++) {\n            controls.push(\n                <Input\n                    label={i === 0 ? '1' : i === 1 ? 'x' : 'x^' + i}\n                    onChange={(value) => {\n                        const newArr = Array.from(this.state.polynom);\n                        newArr[i] = value !== 0;\n                        this.setState({ polynom: newArr });\n                    }}\n                    value={this.state.polynom[i] ? 1 : 0}\n                />,\n            );\n        }\n        controls.push(<hr />, <p>Zpráva:</p>);\n        for (let i = 0; i < this.state.width; i++) {\n            controls.push(\n                <Input\n                    label={'' + (i + 1)}\n                    onChange={(value) => {\n                        const newArr = Array.from(this.state.message);\n                        newArr[i] = value !== 0;\n                        this.setState({ message: newArr });\n                    }}\n                    value={this.state.message[i] ? 1 : 0}\n                />,\n            );\n        }\n\n        return (\n            <>\n                <Input\n                    label=\"šiřka = \"\n                    onChange={(value) => {\n                        this.setState({ width: value });\n                    }}\n                    value={this.state.width}\n                />\n                <Input\n                    label=\"výška = \"\n                    onChange={(value) => {\n                        this.setState({ height: value });\n                    }}\n                    value={this.state.height}\n                />\n                <hr />\n                {controls}\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.update()}>\n                    Vypočítej!\n                </button>\n                <hr />\n                <p>Matici kódu vynásobíme zprávou, kterou chceme zakódovat:</p>\n                <table className=\"matrix\">\n                    {this.state.matrix.length > 0 &&\n                        flipMatrix(this.state.matrix, this.state.width, this.state.height).map((row, y) => (\n                            <tr\n                                className={y === this.state.height - this.state.width - 1 ? 'matrix-border' : undefined}\n                            >\n                                {row.map((cell, x) => (\n                                    <td>{cell ? '1' : '0'}</td>\n                                ))}\n                            </tr>\n                        ))}\n                </table>{' '}\n                ·{' '}\n                <table className=\"matrix\">\n                    {polynomToFixedLength(this.state.message, this.state.width).map((row, y) => (\n                        <tr>\n                            <td>{row ? '1' : '0'}</td>\n                        </tr>\n                    ))}\n                </table>{' '}\n                ={' '}\n                <table className=\"matrix\">\n                    {this.state.matrix.length > 0 &&\n                        encodeWithPolynom(\n                            this.state.width,\n                            this.state.height,\n                            this.state.matrix,\n                            polynomToFixedLength(this.state.message, this.state.width),\n                        ).map((row, y) => (\n                            <tr\n                                className={y === this.state.height - this.state.width - 1 ? 'matrix-border' : undefined}\n                            >\n                                <td>{row ? '1' : '0'}</td>\n                            </tr>\n                        ))}\n                </table>\n            </>\n        );\n    }\n}\n","import { polynomXor, polynomToFixedLength } from './generateMatrix';\n\nexport function encodeWithPolynom(width: number, height: number, matrix: boolean[][], input: boolean[]) {\n    let res: boolean[] = [];\n\n    for (let i = 0; i < width; i++) {\n        if (input[i]) {\n            res = polynomXor(res, matrix[i], height);\n        }\n    }\n\n    return polynomToFixedLength(res, height);\n}\n","import React from 'react';\nimport { Input } from '../tools/input';\n\nexport type IPrimitiveRootState = {\n    p: number;\n    steps: JSX.Element;\n};\n\nexport class PrimitiveRoot extends React.Component<{}, IPrimitiveRootState> {\n    state: IPrimitiveRootState = {\n        p: 0,\n        steps: <></>,\n    };\n\n    update() {\n        this.setState({ steps: primitiveRoot(this.state.p).steps });\n    }\n\n    render() {\n        return (\n            <>\n                <Input\n                    label=\"p (prvočíslo) = \"\n                    onChange={(value) => {\n                        this.setState({ p: value });\n                    }}\n                    value={this.state.p}\n                />\n\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.update()}>\n                    Vypočítej!\n                </button>\n                <hr />\n                {this.state.steps}\n            </>\n        );\n    }\n}\n\nfunction primitiveRoot(p: number) {\n    const decomposition = primeDecomposition(p - 1);\n    let steps: JSX.Element[] = [];\n    let root = 0;\n    let int = 2;\n    while (root === 0) {\n        steps.push(<hr />, <p>a ≡ {int}:</p>);\n        const isPrimitiveRoot = decompositionToPrimes(decomposition)\n            .map((prime, index) => {\n                const ceil = (p - 1) / prime;\n                const res = checkPrimitiveRoot(int, ceil, p);\n                if (index === 0) {\n                    res.powers.forEach((pow, i) => {\n                        steps.push(\n                            <p>\n                                {int}^{Math.pow(2, i)} ≡ {pow}\n                            </p>,\n                        );\n                    });\n                }\n                steps.push(\n                    <br />,\n                    <p>\n                        Zkontrolujeme, jestli {int}^{ceil} !≡ 0:\n                    </p>,\n                );\n                steps.push(\n                    <p>\n                        {int}^{ceil} ≡ {res.used.map((pow) => int + '^' + pow).join(' · ')} ≡ {res.result}\n                    </p>,\n                );\n                return res.result !== 1;\n            })\n            .reduce((prev, curr) => prev && curr, true);\n\n        if (isPrimitiveRoot) {\n            root = int;\n        } else {\n            steps.push(\n                <br />,\n                <p>\n                    {int} není primitivním kořenem mod {p}.\n                </p>,\n            );\n        }\n        int++;\n    }\n\n    return {\n        steps: (\n            <>\n                <p>\n                    Protože {p} je prvočíslo, máme φ({p}) = {p} - 1 = {p - 1}.\n                </p>\n                <p>\n                    Hledáme číslo a řádu {p - 1}. Podle Eulerovy věty a^{p - 1} ≡ 1, budeme kontrolovat, zda{' '}\n                    {decompositionToPrimes(decomposition)\n                        .map((prime) => 'a^' + ((p - 1) / prime).toString() + ' !≡ 1')\n                        .join(', ')}\n                    .\n                </p>\n                <p>\n                    Protože a ≡ 1 má řád 1, začneme s a ≡ 2 a budeme iterovat, dokud nenajdeme nějaký primitivní kořen:\n                </p>\n                {steps}\n                <br />\n                <p>\n                    Primitivním kořenem mod {p} je číslo a = {root}\n                </p>\n                <hr />\n                <p>Všechny primitivní kořeny jsou a^n, kde n je nesoudělné s {p - 1}:</p>\n                <p>\n                    {allPrimitiveRoots(p)\n                        .map((pow) => 'a^' + pow)\n                        .join(', ')}\n                </p>\n            </>\n        ),\n        result: null,\n    };\n}\n\nfunction primeDecomposition(p: number) {\n    let number = 2;\n    let result: number[] = [];\n    while (p != 1) {\n        while (p % number === 0) {\n            if (result[number]) {\n                result[number]++;\n            } else {\n                result[number] = 1;\n            }\n            p = p / number;\n        }\n        number++;\n    }\n    return result;\n}\n\nfunction decompositionToPrimes(decomposition: number[]) {\n    return Object.keys(decomposition).map((str) => parseInt(str));\n}\n\nfunction checkPrimitiveRoot(int: number, ceil: number, mod: number) {\n    let pows: number[] = [];\n    pows.push(int);\n    let pow = 2;\n\n    while (pow <= ceil) {\n        pows.push((pows[pows.length - 1] * pows[pows.length - 1]) % mod);\n        pow *= 2;\n    }\n    pow /= 2;\n\n    let n = 0;\n    let res = 1;\n    let used: number[] = [];\n\n    for (let i = pows.length - 1; i >= 0; i--) {\n        if (n + pow <= ceil) {\n            n += pow;\n            res *= pows[i];\n            res = res % mod;\n            used.push(pow);\n        }\n        pow /= 2;\n    }\n\n    return {\n        result: res,\n        powers: pows,\n        used,\n    };\n}\n\nfunction allPrimitiveRoots(mod: number) {\n    let res: number[] = [];\n    res.push(1);\n    const factor = decompositionToPrimes(primeDecomposition(mod - 1));\n    for (let i = 2; i < mod; i++) {\n        const f2 = decompositionToPrimes(primeDecomposition(i));\n        if (factor.filter((value) => -1 !== f2.indexOf(value)).length === 0) {\n            res.push(i);\n        }\n    }\n\n    return res;\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport './style.css';\nimport { RSA_encode } from './solvers/RSA/encode';\nimport { RSA_decode } from './solvers/RSA/decode';\nimport { SoustavaKongruenci } from './solvers/others/soustava';\nimport { DiffieHellman } from './solvers/DiffieHellman/encode';\nimport { ElGamal_encode } from './solvers/ElGamal/encode';\nimport { ElGamal_decode } from './solvers/ElGamal/decode';\nimport { Rabin_decode } from './solvers/Rabin/decode';\nimport { Rabin_encode } from './solvers/Rabin/encode';\nimport { generateMatrix } from './solvers/polynomCodes/generateMatrix';\nimport { encodeWithPolynom } from './solvers/polynomCodes/encode';\nimport { Matrix } from './solvers/polynomCodes/Matrix';\nimport { MatrixEncode } from './solvers/polynomCodes/MatrixEncode';\nimport { PrimitiveRoot } from './solvers/primitiveRoot/primitiveRoot';\n\nexport type AppState = {};\n\nconst tabs: { title: string; content: JSX.Element }[] = [\n    { title: 'Primitivní kořen', content: <PrimitiveRoot /> },\n    { title: 'Soustava 2 kongruencí', content: <SoustavaKongruenci /> },\n    { title: 'RSA zašifrování', content: <RSA_encode /> },\n    { title: 'RSA odšifrování', content: <RSA_decode /> },\n    { title: 'Diffie-Hellman', content: <DiffieHellman /> },\n    { title: 'ElGamal zašifrování', content: <ElGamal_encode /> },\n    { title: 'ElGamal odšifrování', content: <ElGamal_decode /> },\n    { title: 'Rabin zašifrování', content: <Rabin_encode /> },\n    { title: 'Rabin odšifrování', content: <Rabin_decode /> },\n    { title: 'Polynomiální matice', content: <Matrix /> },\n    { title: 'Polynom zakódování', content: <MatrixEncode /> },\n];\n\nexport class App extends React.Component<{}, AppState> {\n    render() {\n        return (\n            <div className=\"m-3\">\n                <ul className=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n                    {tabs.map((tab, index) => (\n                        <li className=\"nav-item\" role=\"presentation\">\n                            <a\n                                className={'nav-link' + (index === 0 ? ' active' : '')}\n                                id={'tab-' + index + '-tab'}\n                                data-toggle=\"tab\"\n                                href={'#tab-' + index}\n                                role=\"tab\"\n                                aria-controls={'tab-' + index}\n                                aria-selected={index === 0 ? 'true' : 'false'}\n                            >\n                                {tab.title}\n                            </a>\n                        </li>\n                    ))}\n                </ul>\n                <div className=\"tab-content\" id=\"myTabContent\">\n                    {tabs.map((tab, index) => (\n                        <div\n                            className={'tab-pane fade' + (index === 0 ? ' show active' : '')}\n                            id={'tab-' + index}\n                            role=\"tabpanel\"\n                            aria-labelledby={'tab-' + index + '-tab'}\n                        >\n                            <div className=\"solution\">{tab.content}</div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}